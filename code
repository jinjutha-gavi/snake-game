import tkinter
import random

ROWS = 26
COLS = 26
TILE_SIZE = 26

WINDOW_WIDTH = TILE_SIZE * COLS
WINDOW_HEIGHT = TILE_SIZE * ROWS

class Tile:
    def __init__(self, x, y):
        self.x = x
        self.y = y

# game window
window = tkinter.Tk()
window.title("Snake")
window.resizable(False, False)

canvas = tkinter.Canvas(window, bg = "black", width = WINDOW_WIDTH, height = WINDOW_HEIGHT, borderwidth = 0, highlightthickness = 0)
canvas.pack()
window.update()

# center the window
window_width = window.winfo_width()
window_height = window.winfo_height()
screen_width = window.winfo_screenwidth()
screen_height = window.winfo_screenheight()

window_x = int((screen_width/2) - (window_width/2))
window_y = int((screen_height/2) - (window_height/2))

# format "(w)x(h)+(x)+(y)"
window.geometry(f"{window_width}x{window_height}+{window_x}+{window_y}")

# initialize game
snake = Tile(TILE_SIZE * 5, TILE_SIZE * 5) # single tile, snake's head
food = Tile(TILE_SIZE * 10, TILE_SIZE * 10)
velocityX = 0
velocityY = 0
snake_body = [] # multiple snake tiles
game_over = False
score = 0

# game loop
def change_direction(e): # e = event
    global velocityX, velocityY, game_over
    if (game_over):
        reset_game() # reset the game
        return

    if (e.keysym == "Up" and velocityY != 1):
        velocityX = 0
        velocityY = -1

    elif (e.keysym == "Down" and velocityY != -1):
        velocityX = 0
        velocityY = 1

    elif (e.keysym == "Left" and velocityX != 1):
        velocityX = -1
        velocityY = 0

    elif (e.keysym == "Right" and velocityX != -1):
        velocityX = 1
        velocityY = 0

def move():
    global snake, food, snake_body, game_over, score
    if (game_over):
        return

    # check snake collision with walls
    if (snake.x < 0 or snake.x >= WINDOW_WIDTH or snake.y < 0 or snake.y >= WINDOW_HEIGHT):
        game_over = True
        return

    # check snake collision with itself
    for tile in snake_body:
        if (snake.x == tile.x and snake.y == tile.y):
            game_over = True
            return

    # check snake collision with food
    if (snake.x == food.x and snake.y == food.y):
        snake_body.append(Tile(food.x, food.y))
        while True:
            food.x = random.randint(0, COLS-1) * TILE_SIZE
            food.y = random.randint(0, ROWS-1) * TILE_SIZE
            if all(food.x != tile.x or food.y != tile.y for tile in snake_body) and \
               all(food.x != wall.x or food.y != wall.y for wall in walls):
                break

        score += 10

    # update snake body
    for i in range(len(snake_body)-1, -1, -1):
        tile = snake_body[i]
        if (i == 0):
            tile.x = snake.x
            tile.y = snake.y
        else:
            prev_tile = snake_body[i-1]
            tile.x = prev_tile.x
            tile.y = prev_tile.y

    # move snake head
    snake.x += velocityX * TILE_SIZE
    snake.y += velocityY * TILE_SIZE

    # check snake collision with walls (obstacles)
    for wall in walls:
        if (snake.x == wall.x and snake.y == wall.y):
            game_over = True

# generate random walls
walls = [Tile(TILE_SIZE * random.randint(0, COLS-1), TILE_SIZE * random.randint(0, ROWS-1)) for _ in range(10)] # add 10 walls

def draw_grid():
    for i in range(0, WINDOW_WIDTH, TILE_SIZE):
        canvas.create_line(i, 0, i, WINDOW_HEIGHT, fill="gray")
    for j in range(0, WINDOW_HEIGHT, TILE_SIZE):
        canvas.create_line(0, j, WINDOW_WIDTH, j, fill="gray")

def draw():
    global snake, food, snake_body, game_over, score
    move()

    canvas.delete("all")

    draw_grid()

    # draw food
    canvas.create_rectangle(food.x, food.y, food.x + TILE_SIZE, food.y + TILE_SIZE, fill = 'red')

    # draw snake
    canvas.create_rectangle(snake.x, snake.y, snake.x + TILE_SIZE, snake.y + TILE_SIZE, fill = 'lime green')
    for tile in snake_body:
        canvas.create_rectangle(tile.x, tile.y, tile.x + TILE_SIZE, tile.y + TILE_SIZE, fill = 'lime green')

    # draw walls
    for wall in walls:
        canvas.create_rectangle(wall.x, wall.y, wall.x + TILE_SIZE, wall.y + TILE_SIZE, fill = 'gray')

    # display score
    if (game_over):
        canvas.create_text(WINDOW_WIDTH/2, WINDOW_HEIGHT/2, font = "Arial 20", text = f"Game Over: {score}", fill = "white")
        canvas.create_text(WINDOW_WIDTH/2, WINDOW_HEIGHT/2 + 30, font = "Arial 10", text = "Press any key to restart", fill = "white")
    else:
        canvas.create_text(30, 20, font = "Arial 10", text = f"Score: {score}", fill = "white")

    window.after(110, draw) # call draw again every 110ms

def reset_game():
    global snake, food, snake_body, game_over, score, velocityX, velocityY, walls
    snake = Tile(TILE_SIZE * 5, TILE_SIZE * 5)
    food = Tile(TILE_SIZE * 10, TILE_SIZE * 10)
    snake_body = []
    game_over = False
    score = 0
    velocityX = 0
    velocityY = 0
    # redraw the walls every time the game is reset
    walls = [Tile(TILE_SIZE * random.randint(0, COLS-1), TILE_SIZE * random.randint(0, ROWS-1)) for _ in range(10)]

# bind to KeyPress instead of KeyRelease
window.bind("<KeyPress>", change_direction)

draw()
window.mainloop()
